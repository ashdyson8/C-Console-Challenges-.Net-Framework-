Minimum number of operations in order to partition a given array
E.g. Input -> {3,5,3,7,9,4,1} K = 3 
    Output -> 3 (the array is partitioned {3,3,3} {7,7} {4,4})

        public static void Main(string[] args)
        {
            int k = 3;
            int[] ar = { 3, 1, 3, 3, 2, 1, 8, 5 };

            Console.WriteLine(getMinimumOps(ar, k));

        }
        public static int getMinimumOps(int[] ar, int k)
        {

            int n = ar.Length;

            int[,] dp = new int[n, k + 1];

            dp[0, 1] = 0;

            for (int i = 1; i < n; i++)
            {

                int maxGroups = Math.Min(k, i + 1);

                for (int j = 1; j <= maxGroups; j++)
                {

                    dp[i, j] = int.MaxValue;

                    if (j == 1)
                    {

                        int[] freq = new int[100000];
                        int freqOfMode = 0;
                        for (int it = 0; it <= i; it++)
                        {
                            freq[ar[it]]++;
                            int newElementFreq = freq[ar[it]];
                            if (newElementFreq > freqOfMode)
                                freqOfMode = newElementFreq;
                        }


                        dp[i, 1] = (i + 1) - freqOfMode;
                    }
                    else
                    {
                        int[] freq = new int[100000];
                        int freqOfMode = 0;


                        for (int it = i; it >= j - 1; it--)
                        {
                            freq[ar[it]]++;
                            int newElementFreq = freq[ar[it]];
                            if (newElementFreq > freqOfMode)
                                freqOfMode = newElementFreq;


                            int elementsToChange = i - it + 1;
                            elementsToChange -= freqOfMode;

                            dp[i, j] = Math.Min(dp[it - 1, j - 1] +
                                                elementsToChange, dp[i, j]);
                        }
                    }
                }
            }


            return dp[n - 1, k];

        }
    
